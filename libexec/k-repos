#!/usr/bin/env python
# Usage: ksys repos
# Summary: Update source repositories.
# Help: Cycle through all remote scm repositories
# (in conf/remote_repositories.list) clone them (if needed) and pull the
# latest changes.

import os
import re

from lib import pyutil

_K_CONF = os.environ['_K_CONF']
HOME = os.path.expanduser('~')
RX_REPO = re.compile(r'.+/(.+?).git$')


def main():
    source = os.path.join(_K_CONF, 'ref_repos.list')
    target = os.path.join(HOME, 'Rprojects', 'Reference')
    if not os.path.isdir(target):
        os.makedirs(target)
    extra = update(source, target)

    source = os.path.join(_K_CONF, 'my_repos.list')
    target = os.path.join(HOME, 'Rprojects')
    extra += update(source, target)

    print "Done updating repositories."

    if len(extra):
        print "The following directories are no longer updated and "
        print "should be removed:"
        for name in extra:
            print name
    return


def update(source, target):
    with open(source) as f:
        lines = [line.strip() for line in f.readlines()]
    dirs = map(make_updater(target), lines)
    targets = os.listdir(target)
    targets = map(lambda n: os.path.join(target, n), targets)
    skip = [os.path.join(target, 'Reference')]
    return filter(lambda d: d not in dirs and d not in skip, targets)


def make_updater(dirname):
    def update_repo(url):
        match = RX_REPO.match(url)
        if not match:
            pyutil.exit("unable to regex match url '%s'" % url)

        absdir = os.path.join(dirname, match.groups()[0])
        
        if os.path.isdir(absdir):
            os.chdir(absdir)
            pyutil.shell('git pull origin master')
        else:
            os.chdir(dirname)
            pyutil.shell("git clone %s" % url)

        return absdir

    return update_repo


if __name__ == '__main__':
    main()
